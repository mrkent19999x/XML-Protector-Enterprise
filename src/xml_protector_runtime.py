#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
XML Protector Runtime - Standalone Version
Ch·∫°y ƒë·ªôc l·∫≠p, kh√¥ng c√≥ GUI Builder
"""

import os
import sys
import time
import glob
import json
import pickle
import shutil
import logging
import requests
import re
import xml.etree.ElementTree as ET
import threading
import subprocess
import psutil
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler

try:
    import winreg
except ImportError:
    winreg = None

# --- SECURE CONFIG LOADING --- #
try:
    from security_manager import SecurityManager, ConfigManager
except ImportError:
    SecurityManager = None
    ConfigManager = None

# --- DEFAULT COMPANY INFO --- #
COMPANY_INFO = {
    "name": "Auto-detect",
    "mst": "Auto-detect", 
    "deployment_id": "RUNTIME",
    "version": "2.0.0"
}

# --- XML CONFIG --- #
COMPANY_CONFIG = {
    "mst_tags": ["mst", "MST", "TaxCode", "CompanyTaxCode", "taxCode"],
    "company_name_tags": ["tenNNT", "CompanyName", "TenDN", "Name", "companyName"],
    "amount_tags": ["ct27", "ct22", "ct34", "ct35", "ct36", "ct41", "ct43", "TotalAmount", "SoTien", "Amount", "TongTien", "totalAmount", "giaTriHHDV", "tongCongGiaTriHHDV"],
    "company_mst": None,
    "company_name": None,
    "min_valid_amount": 100000000,
    "max_valid_amount": 50000000000
}

# --- Th∆∞ m·ª•c l∆∞u tr·ªØ --- #
APP_DIR = Path(os.getenv('APPDATA', Path.home())) / 'XMLProtectorRuntime'
TEMPLATES_DIR = APP_DIR / 'templates'
LOG_FILE = APP_DIR / 'xml_protector.log'

def ensure_app_dirs():
    """T·∫°o th∆∞ m·ª•c ·ª©ng d·ª•ng."""
    APP_DIR.mkdir(exist_ok=True)
    TEMPLATES_DIR.mkdir(exist_ok=True)

def load_deployment_info():
    """Load deployment information."""
    deployment_file = APP_DIR / 'deployment_info.json'
    if deployment_file.exists():
        try:
            with open(deployment_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception:
            pass
    return None

def load_secure_telegram_config():
    """Load secure Telegram configuration."""
    try:
        if ConfigManager:
            config_mgr = ConfigManager()
            deployment_info = load_deployment_info()
            if deployment_info:
                company_mst = deployment_info.get("company_mst", "")
                company_name = deployment_info.get("company_name", "")
                full_config = config_mgr.load_config_secure(company_mst, company_name)
                return full_config["telegram"], full_config["company_info"]
        
        # Fallback to environment variables
        bot_token = os.getenv('XML_PROTECTOR_BOT_TOKEN')
        chat_id = os.getenv('XML_PROTECTOR_CHAT_ID')
        admin_ids = os.getenv('XML_PROTECTOR_ADMIN_IDS', '').split(',')
        
        if bot_token and chat_id:
            telegram_config = {
                "bot_token": bot_token,
                "chat_id": chat_id,
                "admin_ids": [int(aid.strip()) for aid in admin_ids if aid.strip().isdigit()]
            }
            return telegram_config, COMPANY_INFO
        
        logging.warning("No secure config found, using demo mode")
        return None, COMPANY_INFO
        
    except Exception as e:
        logging.error(f"Error loading secure config: {e}")
        return None, COMPANY_INFO

def parse_xml_safely(xml_path):
    """Safely parse XML file."""
    try:
        tree = ET.parse(xml_path)
        return tree.getroot()
    except Exception as e:
        logging.error(f"Error parsing XML {xml_path}: {e}")
        return None

def setup_logging():
    """Thi·∫øt l·∫≠p logging th√¥ng minh."""
    ensure_app_dirs()
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(LOG_FILE, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    logging.info("üöÄ XML Protector ƒëang kh·ªüi ƒë·ªông...")

class XMLProtectorRuntime:
    """XML Protector Runtime - phi√™n b·∫£n ch·∫°y ƒë·ªôc l·∫≠p."""
    
    def __init__(self):
        self.setup_logging()
        self.running = True
        self.observer = None
        self.templates = {}
        self.telegram_config = None
        self.company_info = None
        self.load_secure_config()
        self.load_templates()
        
    def setup_logging(self):
        """Thi·∫øt l·∫≠p logging th√¥ng minh."""
        ensure_app_dirs()
        logging.basicConfig(
            level=logging.INFO,
            format='[%(asctime)s] %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler(LOG_FILE, encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        logging.info("üìÅ T·∫°o th∆∞ m·ª•c ·ª©ng d·ª•ng...")
        logging.info("üîê Kh·ªüi t·∫°o h·ªá th·ªëng b·∫£o m·∫≠t...")
        logging.info("üìÑ ƒêang load templates XML...")
    
    def load_secure_config(self):
        """Load secure configuration."""
        self.telegram_config, self.company_info = load_secure_telegram_config()
        if self.telegram_config:
            logging.info(f"Loaded secure config for company: {self.company_info.get('name', 'Unknown')}")
        else:
            logging.warning("No Telegram config available - notifications disabled")
    
    def load_templates(self):
        """Load templates t·ª´ th∆∞ m·ª•c bundled ho·∫∑c external."""
        templates_paths = [
            # Th·ª≠ trong bundle (khi ch·∫°y t·ª´ EXE)
            Path(sys._MEIPASS) / 'templates' if hasattr(sys, '_MEIPASS') else None,
            # Th·ª≠ th∆∞ m·ª•c local
            Path('templates'),
            # Th·ª≠ th∆∞ m·ª•c app data
            TEMPLATES_DIR
        ]
        
        for template_path in templates_paths:
            if template_path and template_path.exists():
                xml_files = list(template_path.glob('*.xml'))
                if xml_files:
                    logging.info(f"T√¨m th·∫•y {len(xml_files)} template XML trong {template_path}")
                    for xml_file in xml_files:
                        self.load_single_template(xml_file)
                    break
        
        if not self.templates:
            logging.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y template XML n√†o!")
        else:
            logging.info(f"‚úÖ ƒê√£ load th√†nh c√¥ng {len(self.templates)} template XML")
            logging.info("üõ°Ô∏è H·ªá th·ªëng b·∫£o v·ªá ƒë√£ s·∫µn s√†ng!")
    
    def load_single_template(self, xml_file):
        """Load m·ªôt template XML v√† ph√¢n t√≠ch n·ªôi dung."""
        try:
            tree = ET.parse(xml_file)
            root = tree.getroot()
            
            # Ph√¢n t√≠ch th√¥ng tin quan tr·ªçng
            template_info = {
                'file_path': str(xml_file),
                'mst': self.extract_mst(root),
                'company_name': self.extract_company_name(root),
                'document_type': self.extract_document_type(root),
                'period': self.extract_period(root),
                'content': ET.tostring(root, encoding='unicode')
            }
            
            # S·ª≠ d·ª•ng MST l√†m key
            if template_info['mst']:
                self.templates[template_info['mst']] = template_info
                logging.info(f"üìã Load template: {xml_file.name} - MST: {template_info['mst']}")
                logging.info(f"   üè¢ C√¥ng ty: {template_info['company_name']}")
                logging.info(f"   üìÖ K·ª≥ k√™ khai: {template_info['period']}")
            
        except Exception as e:
            logging.error(f"L·ªói load template {xml_file}: {e}")
    
    def extract_mst(self, root):
        """Tr√≠ch xu·∫•t MST t·ª´ XML."""
        for tag in COMPANY_CONFIG["mst_tags"]:
            for elem in root.iter():
                if tag.lower() in elem.tag.lower() and elem.text:
                    return elem.text.strip()
        return None
    
    def extract_company_name(self, root):
        """Tr√≠ch xu·∫•t t√™n c√¥ng ty t·ª´ XML."""
        for tag in COMPANY_CONFIG["company_name_tags"]:
            for elem in root.iter():
                if tag.lower() in elem.tag.lower() and elem.text:
                    return elem.text.strip()
        return None
    
    def extract_document_type(self, root):
        """Tr√≠ch xu·∫•t lo·∫°i t√†i li·ªáu."""
        # T√¨m c√°c tag th∆∞·ªùng ch·ª©a th√¥ng tin lo·∫°i t√†i li·ªáu
        doc_type_tags = ["LoaiToKhai", "DocumentType", "Form", "LoaiHoSo"]
        for tag in doc_type_tags:
            for elem in root.iter():
                if tag.lower() in elem.tag.lower() and elem.text:
                    return elem.text.strip()
        return None
    
    def extract_period(self, root):
        """Tr√≠ch xu·∫•t k·ª≥ k√™ khai."""
        period_tags = ["KyKhaiThue", "TaxPeriod", "Period", "Ky"]
        for tag in period_tags:
            for elem in root.iter():
                if tag.lower() in elem.tag.lower() and elem.text:
                    return elem.text.strip()
        return None
    
    def should_protect_file(self, xml_path):
        """Ki·ªÉm tra xem file XML c√≥ c·∫ßn b·∫£o v·ªá kh√¥ng."""
        try:
            tree = ET.parse(xml_path)
            root = tree.getroot()
            
            file_mst = self.extract_mst(root)
            if not file_mst:
                return False, None
            
            # Ki·ªÉm tra xem MST c√≥ trong templates kh√¥ng
            if file_mst in self.templates:
                template = self.templates[file_mst]
                
                # So s√°nh th√¥ng tin chi ti·∫øt
                file_company = self.extract_company_name(root)
                file_doc_type = self.extract_document_type(root)
                file_period = self.extract_period(root)
                
                # N·∫øu tr√πng MST v√† c√°c th√¥ng tin kh√°c
                if (file_company == template['company_name'] and 
                    file_doc_type == template['document_type'] and
                    file_period == template['period']):
                    return True, template
            
            return False, None
            
        except Exception as e:
            logging.error(f"L·ªói ph√¢n t√≠ch file {xml_path}: {e}")
            return False, None
    
    def overwrite_with_template(self, xml_path, template):
        """Ghi ƒë√® file v·ªõi template g·ªëc."""
        start_time = time.time()
        try:
            logging.info(f"üõ°Ô∏è B·∫Øt ƒë·∫ßu b·∫£o v·ªá file: {Path(xml_path).name}")
            
            # Backup file g·ªëc
            backup_start = time.time()
            backup_path = str(xml_path) + f'.backup.{int(time.time())}'
            shutil.copy2(xml_path, backup_path)
            backup_time = (time.time() - backup_start) * 1000
            logging.info(f"üíæ T·∫°o backup: {backup_time:.1f}ms")
            
            # Ghi ƒë√® v·ªõi n·ªôi dung template
            overwrite_start = time.time()
            with open(xml_path, 'w', encoding='utf-8') as f:
                f.write(template['content'])
            overwrite_time = (time.time() - overwrite_start) * 1000
            logging.info(f"üîÑ Ghi ƒë√® ho√†n th√†nh: {overwrite_time:.1f}ms")
            
            # T√≠nh t·ªïng th·ªùi gian
            total_time = (time.time() - start_time) * 1000
            logging.info(f"‚úÖ B·∫¢O V·ªÜ TH√ÄNH C√îNG! (T·ªïng: {total_time:.1f}ms)")
            
            # G·ª≠i th√¥ng b√°o Telegram
            self.send_protection_alert(xml_path, template)
            
        except Exception as e:
            logging.error(f"‚ùå L·ªói ghi ƒë√® file {xml_path}: {e}")
    
    def send_protection_alert(self, xml_path, template):
        """G·ª≠i c·∫£nh b√°o b·∫£o v·ªá qua Telegram."""
        try:
            message = f"""
üõ°Ô∏è **XML PROTECTION ALERT**

üìÑ **File:** `{Path(xml_path).name}`
üè¢ **MST:** `{template['mst']}`
üè≠ **C√¥ng ty:** `{template['company_name']}`
üìã **Lo·∫°i:** `{template['document_type']}`
üìÖ **K·ª≥:** `{template['period']}`
üïê **Th·ªùi gian:** `{time.strftime('%Y-%m-%d %H:%M:%S')}`

‚úÖ File ƒë√£ ƒë∆∞·ª£c ghi ƒë√® v·ªõi template g·ªëc!
"""
            
            self.send_telegram_message(message)
            
        except Exception as e:
            logging.error(f"L·ªói g·ª≠i Telegram alert: {e}")
    
    def send_telegram_message(self, message):
        """G·ª≠i message qua Telegram."""
        if not self.telegram_config:
            logging.warning("No Telegram config - message not sent")
            return
            
        try:
            url = f"https://api.telegram.org/bot{self.telegram_config['bot_token']}/sendMessage"
            data = {
                "chat_id": self.telegram_config['chat_id'],
                "text": message,
                "parse_mode": "Markdown"
            }
            
            response = requests.post(url, data=data, timeout=10)
            if response.status_code == 200:
                logging.info("ƒê√£ g·ª≠i Telegram alert")
            else:
                logging.error(f"L·ªói g·ª≠i Telegram: {response.status_code}")
                
        except Exception as e:
            logging.error(f"L·ªói g·ª≠i Telegram: {e}")

class XMLFileHandler(FileSystemEventHandler):
    """Handler x·ª≠ l√Ω s·ª± ki·ªán file XML."""
    
    def __init__(self, protector):
        self.protector = protector
    
    def on_created(self, event):
        """X·ª≠ l√Ω khi file m·ªõi ƒë∆∞·ª£c t·∫°o."""
        if not event.is_directory and event.src_path.endswith('.xml'):
            time.sleep(1)  # ƒê·ª£i file ƒë∆∞·ª£c ghi xong
            self.check_and_protect(event.src_path)
    
    def on_modified(self, event):
        """X·ª≠ l√Ω khi file ƒë∆∞·ª£c s·ª≠a ƒë·ªïi."""
        if not event.is_directory and event.src_path.endswith('.xml'):
            time.sleep(1)  # ƒê·ª£i file ƒë∆∞·ª£c ghi xong
            self.check_and_protect(event.src_path)
    
    def check_and_protect(self, xml_path):
        """Ki·ªÉm tra v√† b·∫£o v·ªá file XML."""
        should_protect, template = self.protector.should_protect_file(xml_path)
        if should_protect:
            logging.info(f"üö® PH√ÅT HI·ªÜN FILE GI·∫¢ M·∫†O: {Path(xml_path).name}")
            logging.info(f"üìç ƒê∆∞·ªùng d·∫´n: {xml_path}")
            logging.info(f"üîç Template kh·ªõp: {template.get('mst', 'Unknown')}")
            self.protector.overwrite_with_template(xml_path, template)
        else:
            logging.debug(f"üìÑ File {Path(xml_path).name} kh√¥ng c·∫ßn b·∫£o v·ªá")

def main():
    """H√†m ch√≠nh."""
    print("üöÄ XML Protector ƒëang kh·ªüi ƒë·ªông...")
    print("=" * 50)
    
    # Kh·ªüi t·∫°o protector
    protector = XMLProtectorRuntime()
    
    if not protector.templates:
        print("‚ùå Kh√¥ng c√≥ template XML n√†o! Tho√°t ch∆∞∆°ng tr√¨nh.")
        return
    
    print(f"‚úÖ ƒê√£ load {len(protector.templates)} template XML")
    print("üõ°Ô∏è H·ªá th·ªëng b·∫£o v·ªá ƒë√£ s·∫µn s√†ng!")
    print("=" * 50)
    
    # Kh·ªüi ƒë·ªông file monitoring
    event_handler = XMLFileHandler(protector)
    observer = Observer()
    
    # Monitor t·∫•t c·∫£ ·ªï ƒëƒ©a
    drives = ['C:\\', 'D:\\', 'E:\\']
    print("üìÅ ƒêang thi·∫øt l·∫≠p file monitoring...")
    for drive in drives:
        if os.path.exists(drive):
            observer.schedule(event_handler, drive, recursive=True)
            print(f"   üìÇ Monitor: {drive}")
    
    observer.start()
    protector.observer = observer
    
    print("‚úÖ XML Protector ƒë√£ s·∫µn s√†ng!")
    print("üõ°Ô∏è ƒêang b·∫£o v·ªá c√°c file XML...")
    print("=" * 50)
    print("üí° Nh·∫•n Ctrl+C ƒë·ªÉ t·∫Øt ch∆∞∆°ng tr√¨nh")
    print("=" * 50)
    
    try:
        while protector.running:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ƒêang t·∫Øt XML Protector...")
        protector.running = False
        observer.stop()
    
    observer.join()
    print("‚úÖ XML Protector ƒë√£ t·∫Øt!")
    print("üëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng!")

if __name__ == '__main__':
    main()
