#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
XML Protector Security Manager
Qu·∫£n l√Ω m√£ h√≥a, x√°c th·ª±c v√† b·∫£o m·∫≠t
"""

import os
import sys
import json
import uuid
import hashlib
import platform
import base64
from datetime import datetime, timedelta
from pathlib import Path
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

class SecurityManager:
    """Qu·∫£n l√Ω b·∫£o m·∫≠t t·ªïng th·ªÉ."""
    
    def __init__(self):
        self.app_dir = Path(os.getenv('APPDATA', Path.home())) / 'XMLProtectorRuntime'
        self.app_dir.mkdir(parents=True, exist_ok=True)
        self.config_file = self.app_dir / 'secure_config.enc'
        self.machine_id = self.get_machine_id()
    
    def get_machine_id(self):
        """T·∫°o Machine ID unique cho t·ª´ng m√°y."""
        try:
            # K·∫øt h·ª£p nhi·ªÅu th√¥ng tin ƒë·ªÉ t·∫°o ID unique
            machine_info = f"{platform.node()}-{platform.system()}-{platform.release()}"
            
            # Th√™m MAC address n·∫øu c√≥
            try:
                import uuid
                mac = ':'.join(['{:02x}'.format((uuid.getnode() >> ele) & 0xff) 
                               for ele in range(0,8*6,8)][::-1])
                machine_info += f"-{mac}"
            except:
                pass
                
            # Hash ƒë·ªÉ t·∫°o ID ng·∫Øn g·ªçn
            machine_hash = hashlib.sha256(machine_info.encode()).hexdigest()[:16]
            return machine_hash.upper()
        except:
            # Fallback: Random UUID
            return str(uuid.uuid4())[:16].upper()
    
    def generate_company_key(self, company_mst, company_name=""):
        """T·∫°o encryption key ri√™ng cho t·ª´ng c√¥ng ty."""
        # K·∫øt h·ª£p MST + t√™n DN + machine ID
        key_material = f"{company_mst}-{company_name}-{self.machine_id}"
        
        # Derive key t·ª´ PBKDF2
        kdf = PBKDF2HMAC(
            algorithm=hashes.SHA256(),
            length=32,
            salt=b'xml_protector_salt_2025',
            iterations=100000,
        )
        key = base64.urlsafe_b64encode(kdf.derive(key_material.encode()))
        return key
    
    def encrypt_config(self, config_data, company_mst, company_name=""):
        """M√£ h√≥a config v·ªõi company-specific key."""
        try:
            key = self.generate_company_key(company_mst, company_name)
            f = Fernet(key)
            
            # Th√™m metadata
            secure_config = {
                "encrypted_data": config_data,
                "company_mst": company_mst,
                "company_name": company_name,
                "machine_id": self.machine_id,
                "created_at": datetime.now().isoformat(),
                "expires_at": (datetime.now() + timedelta(days=365)).isoformat()
            }
            
            # M√£ h√≥a to√†n b·ªô
            config_json = json.dumps(secure_config, ensure_ascii=False)
            encrypted = f.encrypt(config_json.encode())
            
            return base64.urlsafe_b64encode(encrypted).decode()
            
        except Exception as e:
            raise Exception(f"‚ùå L·ªói m√£ h√≥a config: {e}")
    
    def decrypt_config(self, encrypted_config, company_mst, company_name=""):
        """Gi·∫£i m√£ config."""
        try:
            key = self.generate_company_key(company_mst, company_name)
            f = Fernet(key)
            
            # Decode v√† decrypt
            encrypted_bytes = base64.urlsafe_b64decode(encrypted_config.encode())
            decrypted = f.decrypt(encrypted_bytes)
            
            secure_config = json.loads(decrypted.decode())
            
            # Ki·ªÉm tra expires
            expires_at = datetime.fromisoformat(secure_config["expires_at"])
            if datetime.now() > expires_at:
                raise Exception("‚è∞ Config ƒë√£ h·∫øt h·∫°n!")
            
            # Ki·ªÉm tra machine ID
            if secure_config.get("machine_id") != self.machine_id:
                raise Exception("üö´ Config kh√¥ng ph√π h·ª£p v·ªõi m√°y n√†y!")
            
            return secure_config["encrypted_data"]
            
        except Exception as e:
            raise Exception(f"‚ùå L·ªói gi·∫£i m√£ config: {e}")
    
    def save_secure_config(self, config_data, company_mst, company_name=""):
        """L∆∞u config m√£ h√≥a v√†o file."""
        try:
            encrypted_config = self.encrypt_config(config_data, company_mst, company_name)
            
            with open(self.config_file, 'w', encoding='utf-8') as f:
                f.write(encrypted_config)
                
            return True
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u config: {e}")
            return False
    
    def load_secure_config(self, company_mst, company_name=""):
        """Load config m√£ h√≥a t·ª´ file."""
        try:
            if not self.config_file.exists():
                raise Exception("üìÑ Kh√¥ng t√¨m th·∫•y config file!")
            
            with open(self.config_file, 'r', encoding='utf-8') as f:
                encrypted_config = f.read().strip()
            
            return self.decrypt_config(encrypted_config, company_mst, company_name)
            
        except Exception as e:
            raise Exception(f"‚ùå L·ªói load config: {e}")
    
    def generate_bot_token_hash(self, bot_token):
        """T·∫°o hash ƒë·ªÉ verify bot token m√† kh√¥ng l∆∞u plaintext."""
        return hashlib.sha256(f"{bot_token}-{self.machine_id}".encode()).hexdigest()
    
    def validate_admin_access(self, user_id, admin_ids_list):
        """Validate admin access v·ªõi time-based restrictions."""
        try:
            if user_id not in admin_ids_list:
                return False, "‚ùå User ID kh√¥ng c√≥ quy·ªÅn admin!"
            
            # Th√™m time-based validation n·∫øu c·∫ßn
            current_hour = datetime.now().hour
            if current_hour < 6 or current_hour > 22:
                return False, "‚è∞ Ngo√†i gi·ªù l√†m vi·ªác (6:00-22:00)!"
                
            return True, "‚úÖ Admin access h·ª£p l·ªá"
            
        except Exception as e:
            return False, f"‚ùå L·ªói validate admin: {e}"
    
    def create_deployment_package(self, company_config):
        """T·∫°o package deployment an to√†n cho t·ª´ng c√¥ng ty."""
        try:
            # T·∫°o unique deployment ID
            deployment_id = str(uuid.uuid4())[:8].upper()
            
            # Encrypt config
            encrypted_config = self.encrypt_config(
                company_config["telegram_config"],
                company_config["company_mst"],
                company_config["company_name"]
            )
            
            # Package info
            deployment_package = {
                "deployment_id": deployment_id,
                "company_mst": company_config["company_mst"],
                "company_name": company_config["company_name"],
                "encrypted_config": encrypted_config,
                "templates_count": len(company_config.get("templates", [])),
                "created_at": datetime.now().isoformat(),
                "expires_at": (datetime.now() + timedelta(days=30)).isoformat(),
                "version": "2.0.0-secure"
            }
            
            return deployment_package
            
        except Exception as e:
            raise Exception(f"‚ùå L·ªói t·∫°o deployment package: {e}")
    
    def verify_deployment_package(self, deployment_package):
        """Verify deployment package tr∆∞·ªõc khi s·ª≠ d·ª•ng."""
        try:
            # Ki·ªÉm tra expiry
            expires_at = datetime.fromisoformat(deployment_package["expires_at"])
            if datetime.now() > expires_at:
                return False, "‚è∞ Package ƒë√£ h·∫øt h·∫°n!"
            
            # Ki·ªÉm tra required fields
            required_fields = ["deployment_id", "company_mst", "encrypted_config"]
            for field in required_fields:
                if field not in deployment_package:
                    return False, f"‚ùå Thi·∫øu field: {field}"
            
            return True, "‚úÖ Package h·ª£p l·ªá"
            
        except Exception as e:
            return False, f"‚ùå L·ªói verify package: {e}"

class ConfigManager:
    """Qu·∫£n l√Ω config an to√†n."""
    
    def __init__(self):
        self.security = SecurityManager()
        self.default_config_template = {
            "telegram": {
                "bot_token": "",
                "chat_id": "",
                "admin_ids": []
            },
            "company_info": {
                "mst": "",
                "name": "",
                "deployment_id": ""
            },
            "xml_protection": {
                "min_valid_amount": 100000000,
                "max_valid_amount": 50000000000,
                "monitor_all_drives": True,
                "auto_backup": True
            },
            "security_settings": {
                "auto_update": True,
                "remote_control_enabled": True,
                "audit_logging": True,
                "working_hours_only": False
            }
        }
    
    def create_company_config(self, bot_token, chat_id, admin_ids, company_mst, company_name):
        """T·∫°o config m·ªõi cho c√¥ng ty."""
        try:
            config = self.default_config_template.copy()
            
            # Fill telegram info
            config["telegram"]["bot_token"] = bot_token
            config["telegram"]["chat_id"] = chat_id
            config["telegram"]["admin_ids"] = admin_ids
            
            # Fill company info
            config["company_info"]["mst"] = company_mst
            config["company_info"]["name"] = company_name
            config["company_info"]["deployment_id"] = str(uuid.uuid4())[:8].upper()
            
            return config
            
        except Exception as e:
            raise Exception(f"‚ùå L·ªói t·∫°o config: {e}")
    
    def save_config_secure(self, config):
        """L∆∞u config v·ªõi m√£ h√≥a."""
        try:
            company_mst = config["company_info"]["mst"]
            company_name = config["company_info"]["name"]
            
            return self.security.save_secure_config(config, company_mst, company_name)
            
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u config: {e}")
            return False
    
    def load_config_secure(self, company_mst, company_name):
        """Load config v·ªõi gi·∫£i m√£."""
        try:
            return self.security.load_secure_config(company_mst, company_name)
        except Exception as e:
            # Fallback to environment variables
            return self.load_from_environment()
    
    def load_from_environment(self):
        """Load t·ª´ environment variables nh∆∞ fallback."""
        try:
            config = self.default_config_template.copy()
            
            # Load t·ª´ env vars
            config["telegram"]["bot_token"] = os.getenv("XML_PROTECTOR_BOT_TOKEN", "")
            config["telegram"]["chat_id"] = os.getenv("XML_PROTECTOR_CHAT_ID", "")
            
            admin_ids_str = os.getenv("XML_PROTECTOR_ADMIN_IDS", "")
            if admin_ids_str:
                config["telegram"]["admin_ids"] = [int(x.strip()) for x in admin_ids_str.split(",")]
            
            config["company_info"]["mst"] = os.getenv("XML_PROTECTOR_COMPANY_MST", "")
            config["company_info"]["name"] = os.getenv("XML_PROTECTOR_COMPANY_NAME", "")
            
            if not config["telegram"]["bot_token"]:
                raise Exception("‚ùå Kh√¥ng t√¨m th·∫•y bot token trong environment variables!")
            
            return config
            
        except Exception as e:
            raise Exception(f"‚ùå L·ªói load t·ª´ environment: {e}")

# Test security system
if __name__ == '__main__':
    print("üîí Testing XML Protector Security Manager...")
    
    security = SecurityManager()
    config_mgr = ConfigManager()
    
    # Test t·∫°o config m√£ h√≥a
    test_config = config_mgr.create_company_config(
        bot_token="TEST_TOKEN_123",
        chat_id="-1234567890",
        admin_ids=[123456789],
        company_mst="0123456789",
        company_name="C√¥ng ty Test TNHH"
    )
    
    print(f"‚úÖ Machine ID: {security.machine_id}")
    print(f"‚úÖ Test config t·∫°o th√†nh c√¥ng")
    
    # Test save/load
    if config_mgr.save_config_secure(test_config):
        print("‚úÖ Save config m√£ h√≥a th√†nh c√¥ng")
        
        # Test load
        loaded_config = config_mgr.load_config_secure("0123456789", "C√¥ng ty Test TNHH")
        print("‚úÖ Load config m√£ h√≥a th√†nh c√¥ng")
        print(f"‚úÖ Bot Token: {loaded_config['telegram']['bot_token'][:10]}...")
    else:
        print("‚ùå Save config th·∫•t b·∫°i")